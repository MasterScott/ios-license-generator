// Code generated by go-bindata.
// sources:
// template/License.plist
// template/LicenseList.plist
// template/LicenseListItem.plist
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateLicensePlist = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xb1\x4e\xc3\x30\x10\x86\xe7\xe4\x29\x8c\xf7\xe4\x60\x43\xc8\x4d\x45\x9b\x16\x55\x8a\xc0\x52\xdc\x81\x31\x8a\xaf\x60\x91\xc6\x96\x63\x48\xa3\xaa\xef\xce\x85\x36\x15\x88\xcd\xba\xfb\xbe\xdf\xff\x89\xf9\x61\xdf\xb0\x2f\xf4\x9d\xb1\xed\x8c\xdf\xa5\xb7\x9c\x61\x5b\x5b\x6d\xda\xb7\x19\xdf\xaa\x75\x72\xcf\xe7\x59\x2c\x6e\xf2\x97\xa5\x7a\x95\x2b\xe6\x1a\xd3\x05\x26\xb7\x8b\x62\xb3\x64\x3c\x01\x78\x74\xae\x41\x80\x5c\xe5\x4c\x16\x9b\x52\x31\xca\x00\x58\x3d\x73\xc6\xdf\x43\x70\x0f\x00\x7d\xdf\xa7\xd5\x48\xa5\xb5\xdd\x8f\x60\x07\xd2\x5b\x87\x3e\x0c\x05\x85\x25\x24\xa4\x3a\x68\x4e\xdf\x9c\xd3\xff\xd4\xa1\xa9\x36\x75\xc8\xe2\x48\x7c\xe0\x90\x49\x8f\x3b\xf4\x54\x11\x4b\x87\xb5\xd9\x19\x62\x05\x8c\x1b\x02\x2a\xef\xab\xf1\x11\x4d\x4a\x74\x96\xd4\xe0\x70\x82\x68\xd4\x05\x4f\xe7\x65\xb2\x7c\xf2\xf6\xd3\x5d\x73\x04\x5c\x16\x57\x6f\x6d\x6d\x40\xaf\xf0\x10\xfe\xdb\xc7\x63\xba\xb0\x7a\x38\x9d\x7e\x6b\x02\xa6\xae\x70\xe9\x32\x4d\x04\xfc\xdc\x96\xc5\xdf\x01\x00\x00\xff\xff\xcc\xdb\x0a\xe4\x72\x01\x00\x00")

func templateLicensePlistBytes() ([]byte, error) {
	return bindataRead(
		_templateLicensePlist,
		"template/License.plist",
	)
}

func templateLicensePlist() (*asset, error) {
	bytes, err := templateLicensePlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/License.plist", size: 370, mode: os.FileMode(420), modTime: time.Unix(1424657525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLicenselistPlist = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x31\x4f\xc3\x30\x10\x85\xe7\xe6\x57\x1c\xb7\xc7\x07\x1b\x42\x6e\x2a\x68\x8a\x14\x29\x02\x4b\x4d\x07\xc6\x28\xb9\x82\x45\x12\x5b\x8e\x45\xa8\xaa\xfe\x77\xce\x94\x85\xcd\x7a\xfe\xee\x7b\x4f\x6f\xbe\xc7\x01\xbe\x38\xcc\xd6\x4d\x6b\xbc\x53\xb7\x08\x3c\x75\xae\xb7\xd3\xfb\x1a\x0f\xcd\x73\x7e\x8f\x9b\x22\xd3\x37\xe5\xeb\xb6\x79\x33\x3b\xf0\x83\x9d\x23\x98\xc3\x53\x5d\x6d\x01\x73\xa2\x47\xef\x07\x26\x2a\x9b\x12\x4c\x5d\xed\x1b\x10\x07\xd1\xee\x05\x01\x3f\x62\xf4\x0f\x44\xcb\xb2\xa8\x36\x51\xaa\x73\x63\x02\x67\x32\xc1\x79\x0e\xf1\x54\x8b\x2c\x97\x03\xd5\xc7\x1e\xa5\xe6\x6a\xff\x37\x47\xd2\xde\x76\xb1\xc8\x56\xfa\x93\x4f\x85\x09\x7c\xe4\x20\x13\x79\xef\xb9\xb3\x47\x2b\xac\xa6\xf4\x23\x40\x1b\x42\x9b\x1e\xab\xf3\x59\x55\x91\xc7\xcb\x45\x42\xfa\x4b\x35\x5d\x3d\x9a\x7e\x5b\x8a\xec\x27\x00\x00\xff\xff\x86\xb8\x23\xd0\xfc\x00\x00\x00")

func templateLicenselistPlistBytes() ([]byte, error) {
	return bindataRead(
		_templateLicenselistPlist,
		"template/LicenseList.plist",
	)
}

func templateLicenselistPlist() (*asset, error) {
	bytes, err := templateLicenselistPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/LicenseList.plist", size: 252, mode: os.FileMode(420), modTime: time.Unix(1424656664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLicenselistitemPlist = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x4c\x2e\xb1\xe3\xe2\xb4\xc9\x4e\xad\xb4\x0b\xa9\x2c\x48\xb5\xd1\x07\xb1\x80\x02\xc5\x25\x45\x99\x79\xe9\x76\x01\xc1\xce\x19\x99\x39\x29\x01\x89\x79\xa9\xc1\x05\xa9\xc9\x99\x69\x99\xa9\x45\x36\xfa\x50\x49\x98\xbe\xcc\x92\x1c\x0c\x8d\xd5\xd5\x7a\x7e\x89\xb9\xa9\xb5\xb5\xe8\xaa\xdd\x32\x89\x52\x6c\xa3\x0f\x76\x1a\x20\x00\x00\xff\xff\x81\x2f\xca\xf1\xa1\x00\x00\x00")

func templateLicenselistitemPlistBytes() ([]byte, error) {
	return bindataRead(
		_templateLicenselistitemPlist,
		"template/LicenseListItem.plist",
	)
}

func templateLicenselistitemPlist() (*asset, error) {
	bytes, err := templateLicenselistitemPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/LicenseListItem.plist", size: 161, mode: os.FileMode(420), modTime: time.Unix(1424653357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/License.plist":         templateLicensePlist,
	"template/LicenseList.plist":     templateLicenselistPlist,
	"template/LicenseListItem.plist": templateLicenselistitemPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"License.plist":         &bintree{templateLicensePlist, map[string]*bintree{}},
		"LicenseList.plist":     &bintree{templateLicenselistPlist, map[string]*bintree{}},
		"LicenseListItem.plist": &bintree{templateLicenselistitemPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
